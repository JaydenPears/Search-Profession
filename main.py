# -*- coding: utf-8 -*-
# import modules:
from api import search_profession, db

# import libraries:
import telebot
from telebot import types
# –í–û–í–ê, –í–ï–†–ù–ò –°–ù–ò–ö–ï–†–°!!!! –û–ù –•–û–ß–ï–¢ –û–°–¢–ê–¢–¨–°–Ø –î–ï–í–°–¢–í–ï–ù–ù–ò–ö–û–ú!!!!
#
#
# P.S. –®–£–ß–£) 
#P.S.S –ò–õ–ò –ù–ï–¢ >:(

LANGUAGES = ['Python', 'Rust', 'C++', 'C#', 'JS', 'SQL', 'Swift', 'Kotlin', 'Java', 'Assembler']
TRANSLATE = {'developer': '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'gamedesigner': '–≥–µ–π–º–¥–∑–∏–∞–π–Ω–µ—Ä'}
bot = telebot.TeleBot("5367028014:AAEKarGWXV5Zu0ybZsRkxGui00ILp6S388Y")
massButtonChat = {}
massButtonKeyboardG = []
massButtonKeyboardD = []
save = 0
path = []


@bot.message_handler(commands=["start"])
def start(message):
    text_hello = '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–º–æ—â–∏ –≤ —ç—Ç–æ–º –º–æ–ª–æ–¥—ã–º ' \
                 '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –≤ –≥–æ—Ä–æ–¥–µ –ú–æ—Å–∫–≤–∞.'
    bot.send_message(message.chat.id, text_hello)

    markup_inline = types.InlineKeyboardMarkup()
    markup_inline.add(massButtonChat['work'], massButtonChat['sideJob'])
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å " \
                                      "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π. ", reply_markup=markup_inline)


@bot.message_handler(commands=["help"])
def help(message):
    text_hello = '–í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø—Ä–æ—Å—å–±–∞ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –Ω–∞—à—É –ø–æ—á—Ç—É: tgbotsearchforjob@gmail.com.'
    bot.send_message(message.chat.id, text_hello)


@bot.message_handler(content_types=["text"])
def text_handler(message):
    global path
    search_profession(db, path[2] + 's', f'{message.text} {TRANSLATE[path[2]]}', message.text, path[3])
    vacancies = db.read(path[2] + 's')  # –°–ø–∏—Å–æ–∫, –∫–∞–∫ —Å–ø–∏—Å–æ–∫ data –≤ –ø—Ä–∏–º–µ—Ä–µ –∫—Ä–∞—Å–∏–≤–æ–π –ø–µ—á–∞—Ç–∏
    for vacancy in vacancies:
        salary = vacancy[1].split()
        if vacancy[0] == '–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞':
            place = '–†–∞–±–æ—Ç–∞ –≤ —É–¥–∞–ª—ë–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ.'
        else:
            place = f'–ë–ª–∏–∂–∞–π—à–∞—è —Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ: {vacancy[0]}'
        message = f'–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –æ—Ç {salary[0]} –∏ –¥–æ {salary[1]} —Ä—É–±–ª–µ–π.\n'
        message += f'{place}\n'
        message += f'–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {vacancy[2]}.\n'
        message += f'-------------'
    path = []
		bot.send_message(call.message.chat.id,text=message)


@bot.callback_query_handler(func=lambda call: True)
def answer(call):
    global save, path

    if call.data == "work":
        markup_inline_work = types.InlineKeyboardMarkup()
        markup_inline_work.add(massButtonChat['finance'], massButtonChat['it'])
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É —Ä–∞–±–æ—Ç—ã:", reply_markup=markup_inline_work)
        path.append(call.data)
    elif call.data == "sideJob":
        pass
    elif call.data == "finance":
        markup_inline_finance = types.InlineKeyboardMarkup()
        markup_inline_finance.add(massButtonChat['accounting'], massButtonChat['management'])
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤:", reply_markup=markup_inline_finance)
        path.append(call.data)
    elif call.data == "it":
        markup_inline_it = types.InlineKeyboardMarkup()
        markup_inline_it.add(massButtonChat['gameDesign'], massButtonChat['developer'])
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:", reply_markup=markup_inline_it)
        path.append(call.data)
    elif call.data == "gameDesign":
        save = 'G'
        markup_inline_it_next = types.InlineKeyboardMarkup()
        markup_inline_it_next.add(massButtonChat['distantWork'], massButtonChat['spaceWork'])
        bot.send_message(call.message.chat.id, "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", reply_markup=markup_inline_it_next)
        path.append(call.data)
    elif call.data == "developer":
        save = 'D'
        markup_inline_it_next = types.InlineKeyboardMarkup()
        markup_inline_it_next.add(massButtonChat['distantWork'], massButtonChat['spaceWork'])
        bot.send_message(call.message.chat.id, "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", reply_markup=markup_inline_it_next)
        path.append(call.data)
    elif call.data == "distantWork":
        markup_inline_it_next_workD = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if save == 'D':
            main_mass = massButtonKeyboardD
        else:
            main_mass = massButtonKeyboardG

        for i in range(0, len(main_mass), 3):
            markup_inline_it_next_workD.add(main_mass[i], main_mass[i + 1], main_mass[i + 2])

        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏ —è–∑—ã–∫:', reply_markup=markup_inline_it_next_workD)
        path.append(call.data)
    elif call.data == "spaceWork":
        markup_inline_it_next_workS = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if save == 'D':
            main_mass = massButtonKeyboardD
        else:
            main_mass = massButtonKeyboardG

        for i in range(0, len(main_mass), 3):
            markup_inline_it_next_workS.add(main_mass[i], main_mass[i + 1], main_mass[i + 2])

        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫:", reply_markup=markup_inline_it_next_workS)
        path.append(call.data)
    elif call.data == "accounting":
        path.append(call.data)
        path.append(False)
        search_profession(db, path[2], f'–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π —É—á—ë—Ç', 'Accounting')
        vacancies = db.read(path[2])  # –°–ø–∏—Å–æ–∫, –∫–∞–∫ —Å–ø–∏—Å–æ–∫ data –≤ –ø—Ä–∏–º–µ—Ä–µ –∫—Ä–∞—Å–∏–≤–æ–π –ø–µ—á–∞—Ç–∏
        path = []
			for vacancy in vacancies:
        salary = vacancy[1].split()
        if vacancy[0] == '–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞':
            place = '–†–∞–±–æ—Ç–∞ –≤ —É–¥–∞–ª—ë–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ.'
        else:
            place = f'–ë–ª–∏–∂–∞–π—à–∞—è —Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ: {vacancy[0]}'
        message = f'–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –æ—Ç {salary[0]} –∏ –¥–æ {salary[1]} —Ä—É–±–ª–µ–π.\n'
        message += f'{place}\n'
        message += f'–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {vacancy[2]}.\n'
        message += f'-------------'
    
			bot.send_message(call.message.chat.id,text=message)
    elif call.data == "management":
        path.append(call.data)
        path.append(False)
        search_profession(db, path[2], f'–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', 'Management')
        vacancies = db.read(path[2])  # –°–ø–∏—Å–æ–∫, –∫–∞–∫ —Å–ø–∏—Å–æ–∫ data –≤ –ø—Ä–∏–º–µ—Ä–µ –∫—Ä–∞—Å–∏–≤–æ–π –ø–µ—á–∞—Ç–∏
        path = []
				for vacancy in vacancies:
        	salary = vacancy[1].split()
        	if vacancy[0] == '–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞':
            place = '–†–∞–±–æ—Ç–∞ –≤ —É–¥–∞–ª—ë–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ.'
        	else:
            place = f'–ë–ª–∏–∂–∞–π—à–∞—è —Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ: {vacancy[0]}'
        	message = f'–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –æ—Ç {salary[0]} –∏ –¥–æ {salary[1]} —Ä—É–±–ª–µ–π.\n'
        	message += f'{place}\n'
        	message += f'–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {vacancy[2]}.\n'
        	message += f'-------------'
    
				bot.send_message(call.message.chat.id,text=message)
			
			

def createButtonChat():
    massButtonChat['work'] = types.InlineKeyboardButton(text="üí∞ –†–∞–±–æ—Ç–∞", callback_data="work")
    massButtonChat['sideJob'] = types.InlineKeyboardButton(text="ü™ô –ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞", callback_data="sideJob")

    massButtonChat['finance'] = types.InlineKeyboardButton(text="üìä –°—Ñ–µ—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤", callback_data="finance")
    massButtonChat['it'] = types.InlineKeyboardButton(text="üñ• –°—Ñ–µ—Ä–∞ IT", callback_data="it")

    massButtonChat['management'] = types.InlineKeyboardButton(text="üë±üèª‚Äç‚ôÇ –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç", callback_data="management")
    massButtonChat['accounting'] = types.InlineKeyboardButton(text="üóÉ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", callback_data="accounting")

    massButtonChat['gameDesign'] = types.InlineKeyboardButton(text="üéÆ Game Design", callback_data="gameDesign")
    massButtonChat['developer'] = types.InlineKeyboardButton(text="üíª Developer", callback_data="developer")

    massButtonChat['distantWork'] = types.InlineKeyboardButton(text="üè† –£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞", callback_data='distantWork')
    massButtonChat['spaceWork'] = types.InlineKeyboardButton(text="üè¢ Space work", callback_data='spaceWork')


def createButtonKeyboard():
    g = ['Python', 'C++', 'C#', 'Swift', 'Java', 'Assembler']
    d = ['Python', 'Rust', 'C++', 'C#', 'VS', 'SQL', 'Swift', 'Kotlin', 'Java']

    for i in range(len(g)):
        massButtonKeyboardG.append(types.KeyboardButton(g[i]))

    for i in range(len(d)):
        massButtonKeyboardD.append(types.KeyboardButton(d[i]))


if __name__ == '__main__':
    createButtonChat()
    createButtonKeyboard()
    bot.polling()