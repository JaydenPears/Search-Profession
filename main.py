# -*- coding: utf-8 -*-
# import modules:
from api import Database, search_profession

# import libraries:
import telebot
from telebot import types

bot = telebot.TeleBot("5333022128:AAEBsg_DAb20lLYh5oA0SdrfGiQO-D8h8Bk")
db = Database('vacancies.db')

listButtonChat = {}
listPathForChat = {'finance': ['accounting', 'management', "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤:", 0],
                   'it': ['gamedesigners', 'developers', "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:", 0],
                   'gamedesigners': ['Languages', 1],
                   'developers': ['Languages', 1],
                   'accounting': ['crisisAnalytics', 'registration', "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É:", 1],
                   'management': ['state', 'entrepreneurial', "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É:", 1],
                   'crisisAnalytics': ['profession', 2],
                   'registration': ['profession', 2],
                   'state': ['profession', 2],
                   'entrepreneurial': ['profession', 2],
                   'languages': ['profession', 2],
                   'district': [3],
                   'Next_vac:': ['Next_vac']
                   }
languages = {'Python': ['G', 'D'], 'C++': ['G', 'D'], 'C#': ['G', 'D'], 'Swift': ['G', 'D'],
             'Java': ['G', 'D'],
             'Assembler': ['G'], 'Rust': ['D'], 'JavaScript': ['D'], 'SQL': ['D'], 'Kotlin': ['D']}
listKeyboardLanguages = {'G': [], 'D': []}
massKeyboardDistrict = []
nameDistricts = ['–°–ó–ê–û', '–°–ê–û', '–°–í–ê–û', '–ó–ê–û', '–¶–ê–û', '–í–ê–û', '–Æ–ó–ê–û', '–Æ–ê–û', '–Æ–í–ê–û']

new_call = 'Next_vac:'
temp_keyboard = types.InlineKeyboardMarkup(row_width=1).add(
    types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏', callback_data=new_call))

checkStatus = {}

vacancies = {}


@bot.message_handler(commands=["start"])
def start(message):
    text_hello = '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã, ' \
                 '—Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–º–æ—â–∏ –≤ —ç—Ç–æ–º –º–æ–ª–æ–¥—ã–º ' \
                 '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –≤ –≥–æ—Ä–æ–¥–µ –ú–æ—Å–∫–≤–∞.'
    bot.send_message(message.chat.id, text_hello)

    markup_inline = types.InlineKeyboardMarkup()
    markup_inline.add(listButtonChat['finance'], listButtonChat['it'])
    checkStatus[message.chat.id] = [None] * 4
    bot.send_message(message.chat.id,
                     "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /feedback –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –Ω–∞–º –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö " \
                     "–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞—Ö.",
                     reply_markup=markup_inline)


@bot.message_handler(commands=["feedback"])
def feedback(message):
    text_hello = '–í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø—Ä–æ—Å—å–±–∞ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –Ω–∞—à—É –ø–æ—á—Ç—É: ' \
                 'tgbotsearchforjob@gmail.com.'
    bot.send_message(message.chat.id, text_hello)


@bot.callback_query_handler(func=lambda call: True)
def answer(call):
    if call.data in list(languages.keys()):
        value = listPathForChat['languages']
    elif call.data in nameDistricts:
        value = listPathForChat['district']
    else:
        value = listPathForChat[call.data]

    if value[0] == 'Next_vac':
        page = vacancies[call.message.chat.id][1]
        array = vacancies[call.message.chat.id][0]

        len_of_array = len(array)
        len_for_vacancies = 0
        need_keyboard = False

        if len_of_array - (page * 5) > 5:
            need_keyboard = True
            len_for_vacancies = (page * 5) + 5
        else:
            len_for_vacancies = len_of_array

        print_vacancy(call.message.chat.id, (page * 5), len_for_vacancies)

        if need_keyboard:
            array = vacancies[call.message.chat.id][0]
            page = vacancies[call.message.chat.id][1] + 1
            vacancies[call.message.chat.id] = [array, page]

            bot.send_message(call.message.chat.id, '–í—ã –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë –≤–∞–∫–∞–Ω—Å–∏–∏?',
                             reply_markup=temp_keyboard)
        else:
            bot.send_message(call.message.chat.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏.')
    elif type(value[0]) == int:
        index = value[0]
        checkStatus[call.message.chat.id][index] = call.data

        profession = checkStatus[call.message.chat.id][0]
        table = checkStatus[call.message.chat.id][1]
        specialization = checkStatus[call.message.chat.id][2]
        district = checkStatus[call.message.chat.id][3]

        bot.send_message(call.message.chat.id, '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.')

        search_profession(call.message.chat.id, db, table, profession, specialization, district)
        vacancies[call.message.chat.id] = [db.read(call.message.chat.id, table).copy(), 0]

        len_of_array = len(vacancies[call.message.chat.id][0])
        len_for_vacancies = 0
        need_keyboard = False

        if len_of_array > 5:
            len_for_vacancies = 5
            need_keyboard = True
        else:
            len_for_vacancies = len_of_array

        print_vacancy(call.message.chat.id, 0, len_for_vacancies)

        if need_keyboard:
            array = vacancies[call.message.chat.id][0]
            page = vacancies[call.message.chat.id][1] + 1
            vacancies[call.message.chat.id] = [array, page]

            bot.send_message(call.message.chat.id, '–í—ã –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë –≤–∞–∫–∞–Ω—Å–∏–∏?',
                             reply_markup=temp_keyboard)
        else:
            if len_for_vacancies == 0:
                bot.send_message(call.message.chat.id, '–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.')
            else:
                bot.send_message(call.message.chat.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏.')
    elif value[0] == 'profession':
        index = value[1]
        checkStatus[call.message.chat.id][index] = call.data
        markup_inline_district = types.InlineKeyboardMarkup()
        for i in range(0, len(massKeyboardDistrict), 3):
            try:
                markup_inline_district.add(massKeyboardDistrict[i], massKeyboardDistrict[i + 1],
                                           massKeyboardDistrict[i + 2])
            except Exception as err:
                pass
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–∫—Ä—É–≥:",
                         reply_markup=markup_inline_district)
    elif value[0] == 'Languages':
        markup_inline_languages = types.InlineKeyboardMarkup()
        buttons = listKeyboardLanguages['G' if call.data == 'gameDesign' else 'D']
        for i in range(0, len(buttons), 3):
            try:
                markup_inline_languages.add(buttons[i], buttons[i + 1], buttons[i + 2])
            except Exception as err:
                pass
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
                         reply_markup=markup_inline_languages)
        index = value[1]
        checkStatus[call.message.chat.id][index] = call.data
    else:
        markup_inline = types.InlineKeyboardMarkup()
        firstButton, secondButton, txt, index = value
        markup_inline.add(listButtonChat[firstButton], listButtonChat[secondButton])
        bot.send_message(call.message.chat.id, txt, reply_markup=markup_inline)
        checkStatus[call.message.chat.id][index] = call.data


def createButtonChat():
    for k, v in {'finance': 'üìä –°—Ñ–µ—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤', 'it': 'üñ• –°—Ñ–µ—Ä–∞ IT',
                 'management': 'üë±üèª‚Äç‚ôÇ –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç',
                 'accounting': 'üóÉ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è', 'gamedesigners': 'üéÆ Game Design',
                 'developers': 'üíª Developer',
                 'crisisAnalytics': '–ö—Ä–∏–∑–∏—Å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', 'registration': '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π —É—á—ë—Ç',
                 'state': '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π', 'entrepreneurial': '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–∏–π'}.items():
        listButtonChat[k] = types.InlineKeyboardButton(text=v, callback_data=k)


def print_vacancy(chat_id, start_index, end_index):
    for i in range(start_index, end_index):
        vacancy = vacancies[chat_id][0][i]
        salary = vacancy[1].split(' - ')
        place = f'–ë–ª–∏–∂–∞–π—à–∞—è —Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ: {vacancy[0]}'

        message = f'–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –æ—Ç {salary[0]} –∏ –¥–æ {salary[1]} —Ä—É–±–ª–µ–π.\n'
        message += f'{place}\n'
        message += f'–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {vacancy[2]}.\n'
        bot.send_message(chat_id, message)


def createButtonKeyboard():
    languages = {'Python': ['G', 'D'], 'C++': ['G', 'D'], 'C#': ['G', 'D'], 'Swift': ['G', 'D'],
                 'Java': ['G', 'D'],
                 'Assembler': ['G'], 'Rust': ['D'], 'JavaScript': ['D'], 'SQL': ['D'],
                 'Kotlin': ['D']}

    for language, fields in languages.items():
        for field in fields:
            listKeyboardLanguages[field].append(
                types.InlineKeyboardButton(text=language, callback_data=language))

    for district in nameDistricts:
        massKeyboardDistrict.append(
            types.InlineKeyboardButton(text=district, callback_data=district))


if __name__ == '__main__':
    createButtonChat()
    createButtonKeyboard()
    bot.polling()
